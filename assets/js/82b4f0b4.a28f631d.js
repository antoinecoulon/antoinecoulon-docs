"use strict";(self.webpackChunkantoinecoulon_docs=self.webpackChunkantoinecoulon_docs||[]).push([[4307],{5751:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"documentation/Langages/TypeScript","title":"TypeScript","description":"---","source":"@site/docs/documentation/Langages/TypeScript.md","sourceDirName":"documentation/Langages","slug":"/documentation/Langages/TypeScript","permalink":"/antoinecoulon-docs/docs/documentation/Langages/TypeScript","draft":false,"unlisted":false,"editUrl":"https://github.com/antoinecoulon/antoinecoulon-docs/tree/master/docs/documentation/Langages/TypeScript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tailwind CSS / Bootstrap","permalink":"/antoinecoulon-docs/docs/documentation/Langages/TailwindCSS_Bootstrap"},"next":{"title":"Formations / Tutoriels","permalink":"/antoinecoulon-docs/docs/category/formations--tutoriels"}}');var s=r(4848),t=r(8453);const l={},c="TypeScript",a={},o=[{value:"Resources",id:"resources",level:2},{value:"Scrimba course",id:"scrimba-course",level:2},{value:"TypeScript vs JavaScript",id:"typescript-vs-javascript",level:3},{value:"Types",id:"types",level:3},{value:"Array type",id:"array-type",level:4},{value:"Custom type",id:"custom-type",level:4},{value:"Literal type",id:"literal-type",level:4},{value:"Literal Union type",id:"literal-union-type",level:4},{value:"Narrowing types",id:"narrowing-types",level:4},{value:"Utility types",id:"utility-types",level:3},{value:"Partial",id:"partial",level:4},{value:"Omit",id:"omit",level:4},{value:"possibly undefined",id:"possibly-undefined",level:3},{value:"functions return type",id:"functions-return-type",level:3},{value:"ENI course",id:"eni-course",level:2},{value:"Partie 1 : TypeScript pour D\xe9butants",id:"partie-1--typescript-pour-d\xe9butants",level:3},{value:"Introduction \xe0 TypeScript",id:"introduction-\xe0-typescript",level:4},{value:"1. Installation de TypeScript",id:"1-installation-de-typescript",level:4},{value:"2. Premi\xe8re Application TypeScript",id:"2-premi\xe8re-application-typescript",level:4},{value:"3. Types Primitifs",id:"3-types-primitifs",level:4},{value:"4. Fonctions et Types",id:"4-fonctions-et-types",level:4},{value:"Partie 2 : TypeScript pour Confirm\xe9s",id:"partie-2--typescript-pour-confirm\xe9s",level:3},{value:"1. Interfaces",id:"1-interfaces",level:4},{value:"2. Classes et Types",id:"2-classes-et-types",level:4},{value:"3. Generics",id:"3-generics",level:4},{value:"4. Modules et Import/Export",id:"4-modules-et-importexport",level:4},{value:"5. Types Avanc\xe9s",id:"5-types-avanc\xe9s",level:4},{value:"6. Type Inference",id:"6-type-inference",level:4},{value:"<em>Conclusion</em>",id:"conclusion",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"typescript",children:"TypeScript"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://roadmap.sh/typescript",children:"Roadmap"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/antoinecoulon/learnTS",children:"GitHub Repo"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://scrimba.com/learn-typescript-c03c",children:"Scrimba course"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#typescript",children:"TypeScript"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#resources",children:"Resources"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#scrimba-course",children:"Scrimba course"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#typescript-vs-javascript",children:"TypeScript vs JavaScript"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#types",children:"Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#array-type",children:"Array type"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#custom-type",children:"Custom type"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#literal-type",children:"Literal type"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#literal-union-type",children:"Literal Union type"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#narrowing-types",children:"Narrowing types"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#utility-types",children:"Utility types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#partial",children:"Partial"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#omit",children:"Omit"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#possibly-undefined",children:"possibly undefined"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#functions-return-type",children:"functions return type"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#eni-course",children:"ENI course"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#partie-1--typescript-pour-d%C3%A9butants",children:"Partie 1 : TypeScript pour D\xe9butants"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#introduction-%C3%A0-typescript",children:"Introduction \xe0 TypeScript"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-installation-de-typescript",children:"1. Installation de TypeScript"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-premi%C3%A8re-application-typescript",children:"2. Premi\xe8re Application TypeScript"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-types-primitifs",children:"3. Types Primitifs"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-fonctions-et-types",children:"4. Fonctions et Types"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#partie-2--typescript-pour-confirm%C3%A9s",children:"Partie 2 : TypeScript pour Confirm\xe9s"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-interfaces",children:"1. Interfaces"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-classes-et-types",children:"2. Classes et Types"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-generics",children:"3. Generics"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-modules-et-importexport",children:"4. Modules et Import/Export"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#5-types-avanc%C3%A9s",children:"5. Types Avanc\xe9s"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#6-type-inference",children:"6. Type Inference"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#conclusion",children:(0,s.jsx)(n.em,{children:"Conclusion"})})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"scrimba-course",children:"Scrimba course"}),"\n",(0,s.jsx)(n.h3,{id:"typescript-vs-javascript",children:"TypeScript vs JavaScript"}),"\n",(0,s.jsxs)(n.p,{children:["Comme introduction, nous cr\xe9ons un d\xe9but d'app en ",(0,s.jsx)(n.code,{children:".js"})," qui contient des erreurs, JavaScript nous laisse \xe9crire et run notre code de cette fa\xe7on et on se rend compte des erreurs qu'une fois en prod ou quand l'app crash au lancement."]}),"\n",(0,s.jsxs)(n.p,{children:["Changer l'extension de ce fichier ",(0,s.jsx)(n.code,{children:"index.js"})," vers ",(0,s.jsx)(n.code,{children:"index.ts"})," pour que TypeScript fasse ressortir les erreurs \xe9videntes et celles qui pourraient en \xeatre:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const menu = [\n    { name: "Margherita", price: 8 },\n    { name: "Pepperoni", price: 10 },\n    { name: "Hawaiian", price: 10 },\n    { name: "Veggie", price: 9 },\n]\n\nlet cashInRegister = 100\nlet nextOrderId = 1\nconst orderQueue = []\n\nfunction addNewPizza(pizza) {\n    menu.push(pizza)\n}\n\nfunction placeOrder(pizzaName) {\n    const selectedPizza = menu.find(pizza => pizza.name === pizzaName)\n    cashInRegister += selectedPizza.price\n    const newOrder = {id: nextOrderId++, pizza: selectedPizza, status: "ordered"}\n    orderQueue.push(newOrder)\n    return newOrder\n}\n\nfunction completeOrder(orderId) {\n    const foundOrder = orderQueue.find(order => order.id === orderId)\n    foundOrder.status = "completed"\n    return foundOrder\n}\n\naddNewPizza({ name: "Chicken Bacon Ranch", cost: 12 })\naddNewPizza({ name: "BBQ Chicken", cost: 12 })\naddNewPizza({ name: "Spicy Sausage", cost: 11 })\n\nplaceOrder("Chicken Bacon Ranch")\ncompleteOrder("1")\n\nconsole.log("Menu:", menu)\nconsole.log("Cash in register:", cashInRegister)\nconsole.log("Order queue:", orderQueue)\n'})}),"\n",(0,s.jsx)(n.p,{children:"On se retrouve maintenant avec beaucoup de bouts de code soulign\xe9s en rouge. Ces erreurs ne sont pas nouvelles, elles exisataient d\xe9j\xe0 !!"}),"\n",(0,s.jsx)(n.p,{children:"On peut corriger ces erreurs gr\xe2ce aux:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.em,{children:"typage explicite"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"custom type"})," (Pizza)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Maintenant, notre code ne contient plus d'erreurs visibles !"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'type Pizza = {\n    name: string\n    price: number\n}\n\ntype Order = {\n    id: number\n    pizza: Pizza\n    status: string\n}\n\nconst menu = [\n    { name: "Margherita", price: 8 },\n    { name: "Pepperoni", price: 10 },\n    { name: "Hawaiian", price: 10 },\n    { name: "Veggie", price: 9 },\n]\n\nlet cashInRegister = 100\nlet nextOrderId = 1\nconst orderQueue: Order[] = []\n\nfunction addNewPizza(pizza: Pizza) {\n    menu.push(pizza)\n}\n\nfunction placeOrder(pizzaName: string) {\n    const selectedPizza = menu.find(pizza => pizza.name === pizzaName)\n    if (!selectedPizza) {\n        console.error(`${pizzaName} does not exist on the menu`);\n        return\n    }\n    \n    cashInRegister += selectedPizza.price\n    const newOrder = {id: nextOrderId++, pizza: selectedPizza, status: "ordered"}\n    orderQueue.push(newOrder)\n    return newOrder\n}\n\nfunction completeOrder(orderId: number) {\n    const foundOrder = orderQueue.find(order => order.id === orderId)\n    if (!foundOrder) {\n        console.error(`${foundOrder} not found`);\n        return\n    }\n    foundOrder.status = "completed"\n    return foundOrder\n}\n\naddNewPizza({ name: "Chicken Bacon Ranch", price: 12 })\naddNewPizza({ name: "BBQ Chicken", price: 12 })\naddNewPizza({ name: "Spicy Sausage", price: 11 })\n\nplaceOrder("Chicken Bacon Ranch")\ncompleteOrder(1)\n\nconsole.log("Menu:", menu)\nconsole.log("Cash in register:", cashInRegister)\nconsole.log("Order queue:", orderQueue)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,s.jsx)(n.h4,{id:"array-type",children:"Array type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let person: Person = {...}\nlet people: Person[] = [{...}, {...}]\nlet othePeople: Array<Person> = [{...}, {...}]\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-type",children:"Custom type"}),"\n",(0,s.jsx)(n.p,{children:"En plus des types primitifs (string, string[], number, boolean...), on peut d\xe9finir des types personnalis\xe9s:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type Type = {\n    propri\xe9t\xe91: type\n    propri\xe9t\xe92: type\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"literal-type",children:"Literal type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let name = "Bob" // TS sait que "Bob" est un string\nconst name2 = "Bobby" // TS voit "Bobby" comme ayant un type "Bobby" car la valeur ne pourra pas changer (const)\n\nlet name: "Bob" = "Bob"\nname = "Bobby" // error\n'})}),"\n",(0,s.jsx)(n.p,{children:"Les 'literal types' seront utiles quand nous aborderons les Unions..."}),"\n",(0,s.jsx)(n.h4,{id:"literal-union-type",children:"Literal Union type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'type UserRole = "guest" | "member" | "admin"\nlet userRole: UserRole = "sjhdjgkd" // Warning from TS\n\ntype User = {\n    username: string\n    role: "guest" | "member" | "admin" // role: UserRole\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"narrowing-types",children:"Narrowing types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'function getPizzaDetails( identifier: string | number ) {\n    if (typeof identifier === "string") {\n        return menu.find(pizza => pizza.name.toLowerCase() === identifier.toLowerCase())\n    } else if (typeof identifier === "number") {\n        return menu.find(pizza => pizza.id === identifier)\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"utility-types",children:"Utility types"}),"\n",(0,s.jsx)(n.h4,{id:"partial",children:"Partial"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Partial<Type>"})}),"\n",(0,s.jsxs)(n.p,{children:["Construit un ",(0,s.jsx)(n.code,{children:"type"})," \xe0 partir de ",(0,s.jsx)(n.code,{children:"Type"})," avec toutes les propri\xe9t\xe9s optionnelles. Exemple:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'type Todo {\n  title: string;\n  description: string;\n}\n \nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {\n  return { ...todo, ...fieldsToUpdate };\n}\n \nconst todo1 = {\n  title: "organize desk",\n  description: "clear clutter",\n};\n \nconst todo2 = updateTodo(todo1, {\n  description: "throw out trash",\n});\n'})}),"\n",(0,s.jsx)(n.h4,{id:"omit",children:"Omit"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Omit<Type, Keys>"})}),"\n",(0,s.jsxs)(n.p,{children:["Construit un ",(0,s.jsx)(n.code,{children:"type"})," en prenant toutes les propri\xe9t\xe9s de ",(0,s.jsx)(n.code,{children:"Type"})," puis en supprimant les ",(0,s.jsx)(n.code,{children:"Keys"})," (string literal, union string literals). Exemple:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n  createdAt: number;\n}\n \ntype TodoPreview = Omit<Todo, "description">;\n \nconst todo: TodoPreview = {\n  title: "Clean room",\n  completed: false,\n  createdAt: 1615544252770,\n};\n \ntodo; // const todo: TodoPreview\n \nconst todo: TodoPreview\n \ntype TodoInfo = Omit<Todo, "completed" | "createdAt">;\n \nconst todoInfo: TodoInfo = {\n  title: "Pick up kids",\n  description: "Kindergarten closes at 5pm",\n};\n \ntodoInfo; // const todoInfo: TodoInfo\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"possibly-undefined",children:"possibly undefined"}),"\n",(0,s.jsx)(n.p,{children:"Quand nous \xe9crivons ce code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'function completeOrder(orderId: number) {\n    const foundOrder = orderQueue.find(order => order.id === orderId)\n    foundOrder.status = "completed"\n    return foundOrder\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Il est possible que l'id que nous cherchons dans notre tableau n'existe pas, ou que l'on ait fait une erreur de frappe, il faut donc s\xe9curiser le code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function completeOrder(orderId: number) {\n    const foundOrder = orderQueue.find(order => order.id === orderId)\n    if (!foundOrder) {                          // On regarde si foundOrder est inexistant, si oui:\n        console.error(`${orderId} not found`);  // Log de l'erreur\n        return                                  // Puis on fait un 'return' afin que la suite de code ne soit pas \xe9x\xe9cut\xe9e\n        // throw new Error()                    il est aussi possible de 'throw' une erreur\n    }\n    foundOrder.status = \"completed\"\n    return foundOrder\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"functions-return-type",children:"functions return type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function addItem(item: Item): void {\n    // On ajoute un item \xe0 une liste par ex, ne renvoie aucune donn\xe9e\n}\n\nfunction getUser(): User | undefined {\n    if (!user) {\n        return\n    }\n    return user: User   // retourne un objet de type User\n}\n\nfunction rollDice(): number {\n    return 6    // retourne un type number\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"eni-course",children:"ENI course"}),"\n",(0,s.jsx)(n.h3,{id:"partie-1--typescript-pour-d\xe9butants",children:"Partie 1 : TypeScript pour D\xe9butants"}),"\n",(0,s.jsx)(n.h4,{id:"introduction-\xe0-typescript",children:"Introduction \xe0 TypeScript"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"TypeScript est un langage de programmation qui s'appuie sur JavaScript en ajoutant des types statiques, ce qui permet de mieux structurer le code et d'identifier les erreurs plus t\xf4t. TypeScript est un sur-ensemble de JavaScript, ce qui signifie que tout code JavaScript est \xe9galement du code TypeScript valide. Lors de la compilation, TypeScript se transforme en JavaScript standard."})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Avantages de TypeScript :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"D\xe9tection d'erreurs \xe0 la compilation."}),"\n",(0,s.jsx)(n.li,{children:"Compl\xe9tion automatique et aide au d\xe9veloppement gr\xe2ce aux types."}),"\n",(0,s.jsx)(n.li,{children:"Support des derni\xe8res fonctionnalit\xe9s JavaScript avec une meilleure compatibilit\xe9."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"1-installation-de-typescript",children:"1. Installation de TypeScript"}),"\n",(0,s.jsx)(n.p,{children:"Pour commencer avec TypeScript, vous devez d'abord l'installer. Vous pouvez l'installer via npm (Node Package Manager) avec la commande suivante :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install -g typescript\n"})}),"\n",(0,s.jsx)(n.p,{children:"Ensuite, vous pouvez v\xe9rifier si l'installation a r\xe9ussi en tapant :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"tsc --version\n"})}),"\n",(0,s.jsx)(n.h4,{id:"2-premi\xe8re-application-typescript",children:"2. Premi\xe8re Application TypeScript"}),"\n",(0,s.jsx)(n.p,{children:"Cr\xe9ez un fichier appel\xe9 app.ts et ajoutez le code suivant :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'let message: string = "Hello, TypeScript!";\n\nconsole.log(message);\n'})}),"\n",(0,s.jsx)(n.p,{children:"Explication :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Le type string est explicitement d\xe9fini pour la variable message."}),"\n",(0,s.jsx)(n.li,{children:"TypeScript vous avertira si vous essayez d'assigner une valeur qui n'est pas une cha\xeene de caract\xe8res."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Pour compiler votre code TypeScript en JavaScript, utilisez la commande :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"tsc app.ts\n"})}),"\n",(0,s.jsx)(n.p,{children:"Cela g\xe9n\xe9rera un fichier app.js que vous pouvez ex\xe9cuter avec Node.js :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node app.js\n"})}),"\n",(0,s.jsx)(n.h4,{id:"3-types-primitifs",children:"3. Types Primitifs"}),"\n",(0,s.jsx)(n.p,{children:"En TypeScript, vous pouvez d\xe9finir diff\xe9rents types de donn\xe9es. Voici quelques exemples :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"string : Cha\xeene de caract\xe8res."}),"\n",(0,s.jsx)(n.li,{children:"number : Nombres (entiers et flottants)."}),"\n",(0,s.jsx)(n.li,{children:"boolean : Valeur vraie ou fausse."}),"\n",(0,s.jsx)(n.li,{children:"any : Un type flexible pour tout type de valeur."}),"\n",(0,s.jsx)(n.li,{children:"void : Repr\xe9sente l'absence de type, souvent utilis\xe9 pour les fonctions qui ne retournent rien."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'let isActive: boolean = true;\n\nlet count: number = 10;\n\nlet name: string = "Alice";\n\nlet anything: any = "Could be anything";\n'})}),"\n",(0,s.jsx)(n.h4,{id:"4-fonctions-et-types",children:"4. Fonctions et Types"}),"\n",(0,s.jsx)(n.p,{children:"Les fonctions en TypeScript peuvent avoir des types d\xe9finis pour leurs param\xe8tres et leur retour. Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function greet(name: string): string {\n\n    return "Hello, " + name;\n\n}\n\nlet greeting = greet("World");\n\nconsole.log(greeting); // "Hello, World"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ici, le param\xe8tre name est de type string, et la fonction retourne une valeur de type string."}),"\n",(0,s.jsx)(n.h3,{id:"partie-2--typescript-pour-confirm\xe9s",children:"Partie 2 : TypeScript pour Confirm\xe9s"}),"\n",(0,s.jsx)(n.h4,{id:"1-interfaces",children:"1. Interfaces"}),"\n",(0,s.jsx)(n.p,{children:"Les interfaces en TypeScript permettent de d\xe9finir des structures de types pour les objets. Elles sont tr\xe8s utiles pour garantir que des objets respectent certaines formes."}),"\n",(0,s.jsx)(n.p,{children:"Exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'interface Person {\n\n    name: string;\n\n    age: number;\n\n}\n\nconst person: Person = {\n\n    name: "John",\n\n    age: 25\n\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"Les interfaces sont \xe9galement utilis\xe9es pour d\xe9finir des signatures de fonction et des classes."}),"\n",(0,s.jsx)(n.h4,{id:"2-classes-et-types",children:"2. Classes et Types"}),"\n",(0,s.jsx)(n.p,{children:"Les classes en TypeScript sont tr\xe8s similaires \xe0 celles de JavaScript, mais elles incluent des types pour les propri\xe9t\xe9s et les m\xe9thodes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'class Car {\n\n    model: string;\n\n    year: number;\n\n    constructor(model: string, year: number) {\n\n        this.model = model;\n\n        this.year = year;\n\n    }   \n\n    displayDetails(): void {\n\n        console.log(`${this.model}, ${this.year}`);\n\n    }\n\n}\n\nlet car = new Car("Tesla", 2020);\n\ncar.displayDetails();\n'})}),"\n",(0,s.jsx)(n.p,{children:"Explication :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Les types string et number sont utilis\xe9s pour les propri\xe9t\xe9s."}),"\n",(0,s.jsx)(n.li,{children:"Le type void est utilis\xe9 pour la m\xe9thode displayDetails, car elle ne retourne rien."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"3-generics",children:"3. Generics"}),"\n",(0,s.jsx)(n.p,{children:"Les g\xe9n\xe9riques permettent de d\xe9finir des types param\xe9tr\xe9s qui ne sont pas connus \xe0 l'avance. C\u2019est une fonctionnalit\xe9 tr\xe8s puissante de TypeScript."}),"\n",(0,s.jsx)(n.p,{children:"Exemple d\u2019utilisation d\u2019un tableau g\xe9n\xe9rique :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function identity<T>(value: T): T {\n\n    return value;\n\n}\n\nlet numberIdentity = identity(5); // number\n\nlet stringIdentity = identity("hello"); // string\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ici, T est un param\xe8tre de type qui peut \xeatre n'importe quel type. TypeScript d\xe9duit automatiquement le type bas\xe9 sur l'argument pass\xe9 \xe0 la fonction."}),"\n",(0,s.jsx)(n.h4,{id:"4-modules-et-importexport",children:"4. Modules et Import/Export"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript supporte les modules, ce qui permet de diviser le code en plusieurs fichiers. Vous pouvez utiliser les mots-cl\xe9s import et export pour organiser votre code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="math.ts"',children:"export function add(x: number, y: number): number {\n\n    return x + y;\n\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="app.ts"',children:"import { add } from './math';\n\nconsole.log(add(2, 3)); // 5\n"})}),"\n",(0,s.jsx)(n.p,{children:"Les modules permettent de mieux organiser et r\xe9utiliser votre code."}),"\n",(0,s.jsx)(n.h4,{id:"5-types-avanc\xe9s",children:"5. Types Avanc\xe9s"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript permet l'utilisation de types avanc\xe9s comme :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Union types : Permet d'avoir plusieurs types possibles."}),"\n",(0,s.jsx)(n.li,{children:"Intersection types : Combine plusieurs types ensemble."}),"\n",(0,s.jsx)(n.li,{children:"Literal types : Utilisation de valeurs exactes comme types."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Exemples :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Union Type\n\nlet status: "success" | "failure" = "success";\n\n// Intersection Type\n\ninterface Employee {\n\n    name: string;\n\n    position: string;\n\n}\n\ninterface Manager {\n\n    department: string;\n\n}\n\ntype ManagerEmployee = Employee & Manager;\n\nlet managerEmployee: ManagerEmployee = {\n\n    name: "Alice",\n\n    position: "Manager",\n\n    department: "HR"\n\n};\n\n// Literal Type\n\nlet level: 1 | 2 | 3 = 2; // "1", "2", or "3" only\n'})}),"\n",(0,s.jsx)(n.h4,{id:"6-type-inference",children:"6. Type Inference"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript peut souvent d\xe9duire le type d'une variable sans que vous ayez \xe0 le sp\xe9cifier explicitement. Cela rend le code plus propre tout en maintenant la s\xe9curit\xe9 des types."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"let age = 30; // TypeScript d\xe9duit automatiquement le type number\n"})}),"\n",(0,s.jsx)(n.p,{children:"Si vous tentez d\u2019assigner un type incompatible \xe0 une variable, TypeScript g\xe9n\xe8re une erreur \xe0 la compilation."}),"\n",(0,s.jsx)(n.h3,{id:"conclusion",children:(0,s.jsx)(n.em,{children:"Conclusion"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"TypeScript est un outil puissant qui permet de travailler avec JavaScript de mani\xe8re plus structur\xe9e et fiable. Au fur et \xe0 mesure que vous avancez, vous d\xe9couvrirez encore plus de fonctionnalit\xe9s comme les types conditionnels, les types mapp\xe9s, et les d\xe9corateurs. En suivant ce cours, vous avez pos\xe9 les bases d'une utilisation avanc\xe9e de TypeScript pour vos projets."})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);