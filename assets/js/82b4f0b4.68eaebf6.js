"use strict";(self.webpackChunkantoinecoulon_docs=self.webpackChunkantoinecoulon_docs||[]).push([[4307],{5751:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"documentation/Langages/TypeScript","title":"TypeScript","description":"Premi\xe8re approche en cours Eni: Angular","source":"@site/docs/documentation/Langages/TypeScript.md","sourceDirName":"documentation/Langages","slug":"/documentation/Langages/TypeScript","permalink":"/antoinecoulon-docs/docs/documentation/Langages/TypeScript","draft":false,"unlisted":false,"editUrl":"https://github.com/antoinecoulon/antoinecoulon-docs/tree/master/docs/documentation/Langages/TypeScript.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"React.js","permalink":"/antoinecoulon-docs/docs/documentation/Langages/React.js"},"next":{"title":"Express.js","permalink":"/antoinecoulon-docs/docs/documentation/Langages/Express.js"}}');var t=s(4848),r=s(8453);const l={sidebar_position:2},c="TypeScript",a={},p=[{value:"Partie 1 : TypeScript pour D\xe9butants",id:"partie-1--typescript-pour-d\xe9butants",level:2},{value:"Introduction \xe0 TypeScript",id:"introduction-\xe0-typescript",level:3},{value:"1. Installation de TypeScript",id:"1-installation-de-typescript",level:3},{value:"2. Premi\xe8re Application TypeScript",id:"2-premi\xe8re-application-typescript",level:3},{value:"3. Types Primitifs",id:"3-types-primitifs",level:3},{value:"4. Fonctions et Types",id:"4-fonctions-et-types",level:3},{value:"Partie 2 : TypeScript pour Confirm\xe9s",id:"partie-2--typescript-pour-confirm\xe9s",level:2},{value:"1. Interfaces",id:"1-interfaces",level:3},{value:"2. Classes et Types",id:"2-classes-et-types",level:3},{value:"3. Generics",id:"3-generics",level:3},{value:"4. Modules et Import/Export",id:"4-modules-et-importexport",level:3},{value:"5. Types Avanc\xe9s",id:"5-types-avanc\xe9s",level:3},{value:"6. Type Inference",id:"6-type-inference",level:3},{value:"<em>Conclusion</em>",id:"conclusion",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"typescript",children:"TypeScript"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Premi\xe8re approche en cours Eni: Angular"}),"\n",(0,t.jsx)(n.em,{children:"En plein essor -> \xe0 bosser pour React"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#typescript",children:"TypeScript"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#partie-1--typescript-pour-d%C3%A9butants",children:"Partie 1 : TypeScript pour D\xe9butants"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#introduction-%C3%A0-typescript",children:"Introduction \xe0 TypeScript"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#1-installation-de-typescript",children:"1. Installation de TypeScript"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#2-premi%C3%A8re-application-typescript",children:"2. Premi\xe8re Application TypeScript"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#3-types-primitifs",children:"3. Types Primitifs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4-fonctions-et-types",children:"4. Fonctions et Types"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#partie-2--typescript-pour-confirm%C3%A9s",children:"Partie 2 : TypeScript pour Confirm\xe9s"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#1-interfaces",children:"1. Interfaces"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#2-classes-et-types",children:"2. Classes et Types"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#3-generics",children:"3. Generics"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4-modules-et-importexport",children:"4. Modules et Import/Export"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#5-types-avanc%C3%A9s",children:"5. Types Avanc\xe9s"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#6-type-inference",children:"6. Type Inference"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#conclusion",children:(0,t.jsx)(n.em,{children:"Conclusion"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"partie-1--typescript-pour-d\xe9butants",children:"Partie 1 : TypeScript pour D\xe9butants"}),"\n",(0,t.jsx)(n.h3,{id:"introduction-\xe0-typescript",children:"Introduction \xe0 TypeScript"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"TypeScript est un langage de programmation qui s'appuie sur JavaScript en ajoutant des types statiques, ce qui permet de mieux structurer le code et d'identifier les erreurs plus t\xf4t. TypeScript est un sur-ensemble de JavaScript, ce qui signifie que tout code JavaScript est \xe9galement du code TypeScript valide. Lors de la compilation, TypeScript se transforme en JavaScript standard."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Avantages de TypeScript :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"D\xe9tection d'erreurs \xe0 la compilation."}),"\n",(0,t.jsx)(n.li,{children:"Compl\xe9tion automatique et aide au d\xe9veloppement gr\xe2ce aux types."}),"\n",(0,t.jsx)(n.li,{children:"Support des derni\xe8res fonctionnalit\xe9s JavaScript avec une meilleure compatibilit\xe9."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"1-installation-de-typescript",children:"1. Installation de TypeScript"}),"\n",(0,t.jsx)(n.p,{children:"Pour commencer avec TypeScript, vous devez d'abord l'installer. Vous pouvez l'installer via npm (Node Package Manager) avec la commande suivante :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install -g typescript\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ensuite, vous pouvez v\xe9rifier si l'installation a r\xe9ussi en tapant :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tsc --version\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-premi\xe8re-application-typescript",children:"2. Premi\xe8re Application TypeScript"}),"\n",(0,t.jsx)(n.p,{children:"Cr\xe9ez un fichier appel\xe9 app.ts et ajoutez le code suivant :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'let message: string = "Hello, TypeScript!";\n\nconsole.log(message);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Explication :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Le type string est explicitement d\xe9fini pour la variable message."}),"\n",(0,t.jsx)(n.li,{children:"TypeScript vous avertira si vous essayez d'assigner une valeur qui n'est pas une cha\xeene de caract\xe8res."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Pour compiler votre code TypeScript en JavaScript, utilisez la commande :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tsc app.ts\n"})}),"\n",(0,t.jsx)(n.p,{children:"Cela g\xe9n\xe9rera un fichier app.js que vous pouvez ex\xe9cuter avec Node.js :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node app.js\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-types-primitifs",children:"3. Types Primitifs"}),"\n",(0,t.jsx)(n.p,{children:"En TypeScript, vous pouvez d\xe9finir diff\xe9rents types de donn\xe9es. Voici quelques exemples :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"string : Cha\xeene de caract\xe8res."}),"\n",(0,t.jsx)(n.li,{children:"number : Nombres (entiers et flottants)."}),"\n",(0,t.jsx)(n.li,{children:"boolean : Valeur vraie ou fausse."}),"\n",(0,t.jsx)(n.li,{children:"any : Un type flexible pour tout type de valeur."}),"\n",(0,t.jsx)(n.li,{children:"void : Repr\xe9sente l'absence de type, souvent utilis\xe9 pour les fonctions qui ne retournent rien."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Exemple :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'let isActive: boolean = true;\n\nlet count: number = 10;\n\nlet name: string = "Alice";\n\nlet anything: any = "Could be anything";\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-fonctions-et-types",children:"4. Fonctions et Types"}),"\n",(0,t.jsx)(n.p,{children:"Les fonctions en TypeScript peuvent avoir des types d\xe9finis pour leurs param\xe8tres et leur retour. Exemple :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function greet(name: string): string {\n\n    return "Hello, " + name;\n\n}\n\nlet greeting = greet("World");\n\nconsole.log(greeting); // "Hello, World"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Ici, le param\xe8tre name est de type string, et la fonction retourne une valeur de type string."}),"\n",(0,t.jsx)(n.h2,{id:"partie-2--typescript-pour-confirm\xe9s",children:"Partie 2 : TypeScript pour Confirm\xe9s"}),"\n",(0,t.jsx)(n.h3,{id:"1-interfaces",children:"1. Interfaces"}),"\n",(0,t.jsx)(n.p,{children:"Les interfaces en TypeScript permettent de d\xe9finir des structures de types pour les objets. Elles sont tr\xe8s utiles pour garantir que des objets respectent certaines formes."}),"\n",(0,t.jsx)(n.p,{children:"Exemple :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface Person {\n\n    name: string;\n\n    age: number;\n\n}\n\nconst person: Person = {\n\n    name: "John",\n\n    age: 25\n\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"Les interfaces sont \xe9galement utilis\xe9es pour d\xe9finir des signatures de fonction et des classes."}),"\n",(0,t.jsx)(n.h3,{id:"2-classes-et-types",children:"2. Classes et Types"}),"\n",(0,t.jsx)(n.p,{children:"Les classes en TypeScript sont tr\xe8s similaires \xe0 celles de JavaScript, mais elles incluent des types pour les propri\xe9t\xe9s et les m\xe9thodes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Car {\n\n    model: string;\n\n    year: number;\n\n    constructor(model: string, year: number) {\n\n        this.model = model;\n\n        this.year = year;\n\n    }   \n\n    displayDetails(): void {\n\n        console.log(`${this.model}, ${this.year}`);\n\n    }\n\n}\n\nlet car = new Car("Tesla", 2020);\n\ncar.displayDetails();\n'})}),"\n",(0,t.jsx)(n.p,{children:"Explication :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Les types string et number sont utilis\xe9s pour les propri\xe9t\xe9s."}),"\n",(0,t.jsx)(n.li,{children:"Le type void est utilis\xe9 pour la m\xe9thode displayDetails, car elle ne retourne rien."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-generics",children:"3. Generics"}),"\n",(0,t.jsx)(n.p,{children:"Les g\xe9n\xe9riques permettent de d\xe9finir des types param\xe9tr\xe9s qui ne sont pas connus \xe0 l'avance. C\u2019est une fonctionnalit\xe9 tr\xe8s puissante de TypeScript."}),"\n",(0,t.jsx)(n.p,{children:"Exemple d\u2019utilisation d\u2019un tableau g\xe9n\xe9rique :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function identity<T>(value: T): T {\n\n    return value;\n\n}\n\nlet numberIdentity = identity(5); // number\n\nlet stringIdentity = identity("hello"); // string\n'})}),"\n",(0,t.jsx)(n.p,{children:"Ici, T est un param\xe8tre de type qui peut \xeatre n'importe quel type. TypeScript d\xe9duit automatiquement le type bas\xe9 sur l'argument pass\xe9 \xe0 la fonction."}),"\n",(0,t.jsx)(n.h3,{id:"4-modules-et-importexport",children:"4. Modules et Import/Export"}),"\n",(0,t.jsx)(n.p,{children:"TypeScript supporte les modules, ce qui permet de diviser le code en plusieurs fichiers. Vous pouvez utiliser les mots-cl\xe9s import et export pour organiser votre code."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="math.ts"',children:"export function add(x: number, y: number): number {\n\n    return x + y;\n\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="app.ts"',children:"import { add } from './math';\n\nconsole.log(add(2, 3)); // 5\n"})}),"\n",(0,t.jsx)(n.p,{children:"Les modules permettent de mieux organiser et r\xe9utiliser votre code."}),"\n",(0,t.jsx)(n.h3,{id:"5-types-avanc\xe9s",children:"5. Types Avanc\xe9s"}),"\n",(0,t.jsx)(n.p,{children:"TypeScript permet l'utilisation de types avanc\xe9s comme :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Union types : Permet d'avoir plusieurs types possibles."}),"\n",(0,t.jsx)(n.li,{children:"Intersection types : Combine plusieurs types ensemble."}),"\n",(0,t.jsx)(n.li,{children:"Literal types : Utilisation de valeurs exactes comme types."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Exemples :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Union Type\n\nlet status: "success" | "failure" = "success";\n\n// Intersection Type\n\ninterface Employee {\n\n    name: string;\n\n    position: string;\n\n}\n\ninterface Manager {\n\n    department: string;\n\n}\n\ntype ManagerEmployee = Employee & Manager;\n\nlet managerEmployee: ManagerEmployee = {\n\n    name: "Alice",\n\n    position: "Manager",\n\n    department: "HR"\n\n};\n\n// Literal Type\n\nlet level: 1 | 2 | 3 = 2; // "1", "2", or "3" only\n'})}),"\n",(0,t.jsx)(n.h3,{id:"6-type-inference",children:"6. Type Inference"}),"\n",(0,t.jsx)(n.p,{children:"TypeScript peut souvent d\xe9duire le type d'une variable sans que vous ayez \xe0 le sp\xe9cifier explicitement. Cela rend le code plus propre tout en maintenant la s\xe9curit\xe9 des types."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let age = 30; // TypeScript d\xe9duit automatiquement le type number\n"})}),"\n",(0,t.jsx)(n.p,{children:"Si vous tentez d\u2019assigner un type incompatible \xe0 une variable, TypeScript g\xe9n\xe8re une erreur \xe0 la compilation."}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:(0,t.jsx)(n.em,{children:"Conclusion"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"TypeScript est un outil puissant qui permet de travailler avec JavaScript de mani\xe8re plus structur\xe9e et fiable. Au fur et \xe0 mesure que vous avancez, vous d\xe9couvrirez encore plus de fonctionnalit\xe9s comme les types conditionnels, les types mapp\xe9s, et les d\xe9corateurs. En suivant ce cours, vous avez pos\xe9 les bases d'une utilisation avanc\xe9e de TypeScript pour vos projets."})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);