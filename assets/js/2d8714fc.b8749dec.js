"use strict";(self.webpackChunkantoinecoulon_docs=self.webpackChunkantoinecoulon_docs||[]).push([[8016],{9405:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"tuto-openrouterai","metadata":{"permalink":"/antoinecoulon-docs/blog/tuto-openrouterai","source":"@site/blog/2025-05-09-tuto-OpenRouterAI.md","title":"Obtenir une API Key OpenRouter.AI et impl\xe9mentation","description":"Voici un guide \xe9tape par \xe9tape pour cr\xe9er une cl\xe9 API sur OpenRouter, puis l\'utiliser dans un projet React avec Vite et TypeScript. Nous allons passer par plusieurs \xe9tapes : cr\xe9er une cl\xe9 API, configurer l\'environnement, et utiliser l\'API dans ton projet.","date":"2025-05-09T00:00:00.000Z","tags":[{"inline":false,"label":"Learn","permalink":"/antoinecoulon-docs/blog/tags/learn","description":"Learn tag description"}],"readingTime":3.19,"hasTruncateMarker":false,"authors":[{"name":"Antoine Coulon","title":"Full Stack Developer","url":"https://github.com/antoinecoulon","page":{"permalink":"/antoinecoulon-docs/blog/authors/antoine"},"socials":{"github":"https://github.com/antoinecoulon"},"imageURL":"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.UOoZp5qhNBeRme8CWQEfhwHaHa%26pid%3DApi&f=1&ipt=41a6bf54d5af486981479c984ff25af6b8be4ab40dc716ccfefae0caba011cf3&ipo=images","key":"antoine"}],"frontMatter":{"slug":"tuto-openrouterai","title":"Obtenir une API Key OpenRouter.AI et impl\xe9mentation","authors":["antoine"],"tags":["learn"]},"unlisted":false,"nextItem":{"title":"Technos \xe0 explorer !","permalink":"/antoinecoulon-docs/blog/learn-technos"}},"content":"Voici un guide \xe9tape par \xe9tape pour cr\xe9er une cl\xe9 API sur OpenRouter, puis l\'utiliser dans un projet React avec Vite et TypeScript. Nous allons passer par plusieurs \xe9tapes : cr\xe9er une cl\xe9 API, configurer l\'environnement, et utiliser l\'API dans ton projet.\\n\\n## \xc9tape 1 : Cr\xe9er une cl\xe9 API sur OpenRouter\\n\\nInscription sur OpenRouter\\n\\nVa sur OpenRouter.ai et cr\xe9e un compte si tu n\u2019en as pas encore un.\\n\\nUne fois connect\xe9, tu devrais acc\xe9der \xe0 ton tableau de bord (Dashboard).\\n\\nG\xe9n\xe9rer une cl\xe9 API\\n\\nDans ton tableau de bord, cherche l\'option API Keys.\\n\\nClique sur Create API Key.\\n\\nDonne un nom \xe0 ta cl\xe9 (par exemple \\"React-Vite-Project\\").\\n\\nUne fois la cl\xe9 g\xe9n\xe9r\xe9e, copie-la. C\'est cette cl\xe9 qui te permettra de faire des appels API.\\n\\n## \xc9tape 2 : Installer Axios pour effectuer des requ\xeates API\\n\\nNous allons utiliser Axios pour g\xe9rer les requ\xeates HTTP. Tu peux l\'installer avec npm :\\n\\n```bash\\nnpm install axios\\n```\\n\\n## \xc9tape 4 : Cr\xe9er un fichier .env pour stocker ta cl\xe9 API\\n\\nIl est recommand\xe9 de ne jamais exposer ta cl\xe9 API directement dans ton code. Utilise un fichier .env pour la stocker en toute s\xe9curit\xe9.\\n\\nCr\xe9e un fichier .env \xe0 la racine de ton projet.\\n\\nAjoute ta cl\xe9 API dans ce fichier en utilisant une variable d\u2019environnement :\\n\\n```ini\\nVITE_OPENROUTER_API_KEY=ta_cl\xe9_api_ici\\n```\\n\\nNote : Les variables d\u2019environnement qui commencent par VITE_ sont accessibles dans le code du front-end avec Vite.\\n\\n## \xc9tape 5 : Impl\xe9menter l\u2019appel API dans React\\n\\nCr\xe9er un fichier api.ts pour centraliser la logique d\'appel API :\\n\\n```typescript title=\\"src/api.ts\\"\\nimport axios from \'axios\';\\n\\nconst API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;\\n\\nexport const getImageDescription = async (imageUrl: string) => {\\n    try {\\n        const response = await axios.post(\\n            \'https://openrouter.ai/api/v1/completions\', // Utilisation de l\'API OpenRouter\\n            {\\n                model: \'meta-llama/llama-4-maverick:free\',\\n                messages: [\\n                    {\\n                        role: \'user\',\\n                        content: [\\n                            { type: \'text\', text: \'What is in this image?\' },\\n                            { type: \'image_url\', image_url: { url: imageUrl } }\\n                        ]\\n                    }\\n                ]\\n            },\\n            {\\n                headers: {\\n                    \'Authorization\': `Bearer ${API_KEY}`,\\n                    \'Content-Type\': \'application/json\'\\n                }\\n            }\\n        );\\n        return response.data.choices[0].message.content;\\n    } catch (error) {\\n        console.error(\'Error during API request:\', error);\\n        throw error;\\n    }\\n};\\n```\\n\\nCr\xe9er un composant React pour afficher le r\xe9sultat\\n\\nMaintenant, cr\xe9ons un composant React qui prendra une URL d\'image et affichera la r\xe9ponse g\xe9n\xe9r\xe9e par l\'API.\\n\\n```tsx title=\\"src/components/ImageDescription.tsx\\"\\nimport React, { useState } from \'react\';\\nimport { getImageDescription } from \'../api\';\\n\\nconst ImageDescription: React.FC = () => {\\n    const [imageUrl, setImageUrl] = useState(\'\');\\n    const [description, setDescription] = useState(\'\');\\n\\n    const handleFetchDescription = async () => {\\n        if (imageUrl) {\\n            try {\\n                const description = await getImageDescription(imageUrl);\\n                setDescription(description);\\n            } catch (error) {\\n                setDescription(\'Error fetching description.\');\\n            }\\n        }\\n    };\\n\\n    return (\\n        <div className=\\"container\\">\\n            <h2>Get Image Description</h2>\\n            <input\\n                type=\\"text\\"\\n                placeholder=\\"Enter image URL\\"\\n                value={imageUrl}\\n                onChange={(e) => setImageUrl(e.target.value)}\\n                className=\\"input\\"\\n            />\\n            <button onClick={handleFetchDescription} className=\\"button\\">\\n                Fetch Description\\n            </button>\\n            {description && <p>{description}</p>}\\n        </div>\\n    );\\n};\\n\\nexport default ImageDescription;\\n```\\n\\nUtiliser ce composant dans ton application\\n\\nAjoute ce composant dans ton fichier App.tsx pour l\'afficher :\\n\\n```tsx title=\\"src/App.tsx\\"\\nimport React from \'react\';\\nimport \'./App.css\';\\nimport ImageDescription from \'./components/ImageDescription\';\\n\\nconst App: React.FC = () => {\\n    return (\\n        <div className=\\"App\\">\\n            <ImageDescription />\\n        </div>\\n    );\\n}\\n\\nexport default App;\\n```\\n\\n## \xc9tape 6 : Tester ton application\\n\\nAssure-toi que ton serveur de d\xe9veloppement fonctionne toujours :\\n\\n```bash\\nnpm run dev\\n```\\n\\nOuvre ton navigateur \xe0 l\'adresse `http://localhost:3000`.\\n\\nEntres l\'URL d\'une image dans le champ et clique sur \\"Fetch Description\\". L\'API OpenRouter devrait retourner une description de l\'image.\\n\\n## Conclusion\\n\\nF\xe9licitations, tu as maintenant une application React avec Vite et TypeScript qui interagit avec l\'API OpenRouter ! Tu peux utiliser cette structure pour int\xe9grer davantage d\'interactions avec l\'API OpenRouter, que ce soit pour des t\xe2ches de g\xe9n\xe9ration de texte, d\'images, ou d\'autres cas d\'utilisation.\\n\\nSi tu rencontres des erreurs, n\u2019h\xe9site pas \xe0 v\xe9rifier les logs dans la console pour plus de d\xe9tails ou me les partager, et je t\'aiderai \xe0 les r\xe9soudre !"},{"id":"learn-technos","metadata":{"permalink":"/antoinecoulon-docs/blog/learn-technos","source":"@site/blog/2025-03-21-technos.md","title":"Technos \xe0 explorer !","description":"Formations int\xe9ressantes","date":"2025-03-21T00:00:00.000Z","tags":[{"inline":false,"label":"Learn","permalink":"/antoinecoulon-docs/blog/tags/learn","description":"Learn tag description"}],"readingTime":0.39,"hasTruncateMarker":true,"authors":[{"name":"Antoine Coulon","title":"Full Stack Developer","url":"https://github.com/antoinecoulon","page":{"permalink":"/antoinecoulon-docs/blog/authors/antoine"},"socials":{"github":"https://github.com/antoinecoulon"},"imageURL":"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.UOoZp5qhNBeRme8CWQEfhwHaHa%26pid%3DApi&f=1&ipt=41a6bf54d5af486981479c984ff25af6b8be4ab40dc716ccfefae0caba011cf3&ipo=images","key":"antoine"}],"frontMatter":{"slug":"learn-technos","title":"Technos \xe0 explorer !","authors":["antoine"],"tags":["learn"]},"unlisted":false,"prevItem":{"title":"Obtenir une API Key OpenRouter.AI et impl\xe9mentation","permalink":"/antoinecoulon-docs/blog/tuto-openrouterai"}},"content":"## Formations int\xe9ressantes\\n\\n- [ ] [Backend Dev Roadmap](https://levelup.gitconnected.com/backend-developer-roadmap-2025-the-complete-guide-ae9d12c38c05)\\n- [ ] [Formation TypeScript](https://believemy.com/en/courses/formation-typescript)\\n- [ ] [Apprendre C++ (OpenClassrooms)](https://openclassrooms.com/fr/courses/1894236-apprenez-a-programmer-en-c)\\n\\n## Quelques technos \xe0 explorer\\n\\n\x3c!-- truncate --\x3e\\n\\n- [ ] Go\\n- [ ] C, C++\\n- [ ] C#\\n- [ ] Docker\\n- [ ] Kubernetes\\n- [ ] Maven\\n- [ ] Npm\\n- [ ] CICD Gitlab Jenkins\\n\\n*video games*:\\n\\n- [ ] Unity\\n- [ ] Unreal Engine\\n- [ ] Godot"}]}}')}}]);